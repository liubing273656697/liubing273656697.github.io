{"meta":{"title":"刘兵的博客","subtitle":null,"description":null,"author":"liubing","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-04-09T13:30:01.000Z","updated":"2018-05-08T06:24:08.302Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-04-13T09:24:01.000Z","updated":"2018-04-16T09:32:47.370Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-09T13:31:59.000Z","updated":"2018-04-16T09:30:41.350Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo基本操作","slug":"hexo基本操作","date":"2018-07-24T03:27:59.000Z","updated":"2018-07-24T08:37:16.019Z","comments":true,"path":"2018/07/24/hexo基本操作/","link":"","permalink":"http://yoursite.com/2018/07/24/hexo基本操作/","excerpt":"","text":"Hexo基本操作1、打开cmd命令窗口 这里有两种方式 第一种 打开github文件所在位置鼠标右键定位 第二种 点击左下角开始-&gt;搜索cmd-&gt;打开-&gt;d:-&gt;cd githubmodel-&gt;cd githublb 如图所示 2、启动hexo 输入指令hexo s 3、访问本地github输入地址访问本地github 1http://localhost:4000/. Ctrl+C停止访问 4、部署网站123Ctrl+C停止访问hexo clean #清理缓存文件和已生成静态的文件hexo deploy 简写 hexo d #部署网站 ![hexo图片](/images/hexo/option/5.png) 部署成功效果如图","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[],"keywords":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}]},{"title":"webstorm注册码","slug":"webstorm注册码","date":"2018-07-24T02:34:53.000Z","updated":"2018-07-24T03:16:10.718Z","comments":true,"path":"2018/07/24/webstorm注册码/","link":"","permalink":"http://yoursite.com/2018/07/24/webstorm注册码/","excerpt":"","text":"Webstorm10.0.4注册码分享几个Webstorm10的注册码： （1）user name ：EMBRACE ===== LICENSE BEGIN =====17739-1204201000002KkN!4z2O8JEyjkuftDAgABD4lJRjxFjntumkZuhIsM”Z!yT4j4JVa55s!deQKrBQneAefezq”bJLy2IB!ym0M===== LICENSE END ===== （2）user name ：weiji ===== LICENSE BEGIN =====32934-1204201000001dzajygtPrmtZjtdslNgnuq”1xO3f8b6UsTB4FkAwW3GXqx4tBNV3TwGtC3zWsqkS8p0ZheXgebFRmRSFXUSmU===== LICENSE END ===== （3）user name ：zhihu ===== LICENSE BEGIN =====69144-1204201000001bf0m3N!wqpuQxAws1SzvVJlCM6cWo8lmN3gcZjiuhNnwy52SVWiWCu4h5snYOJAQ!1QkomDUOAIR7eMX13eQZ===== LICENSE END ===== （4）user name ：mac ===== LICENSE BEGIN =====57005-1204201000002huaF6FT8oLUqR!FTQEv1rl76vBiFj1YB!CQ4wSz64JLTxC6FUhQwzGG9vkUixt8e6QkGyjvYmYezELn”vode0===== LICENSE END ===== （5）user name ：win ===== LICENSE BEGIN =====90337-1204201000000D5oI0”LS2hlubzcIEgiXd63KR0XiZ4zDaXDwYceeCqP6JsVj9SbzPstR”h”UGezBIFfdTeHYwapSmoD!MNW8i===== LICENSE END ===== （6）user name ：segment ===== LICENSE BEGIN =====69318-1204201000000oeCJnJNASzbyoiV6qhdaIUDnD9RHUtsJiSrJ3pAIjMs2idkwTkNgpDvhQGlfY”fmMhplyuJdhksDlIOGOsl8n===== LICENSE END ===== （7）user name ：shadow ===== LICENSE BEGIN =====36097-1204201000000BgWYYA38IYj62xVggd1Ce6SF3R2oZcaAaml58q1SlOz8LiKOZpPYxCwc”LwG1mEd5DBTDy2eKzqCMalrMPkON===== LICENSE END ===== （8）user name ：linux ===== LICENSE BEGIN =====11743-12042010000016Cu”LLCNsz4scZMZgq”LLJwpbIEcFT8pqOt30A0AJQ8mAHRMoPYWL8NTmMZSGJ”B9BRPyXTCxmqSuoNL3tEgt===== LICENSE END ===== （9）user name ：rui ===== LICENSE BEGIN =====96708-1204201000002pYp!GEGML642w6GxDdKL6”PuxrcMx5”lJblgdjVt6e6D9yuBaOLhJOBgHMnmXtMyQWcReQ0VEA7S0ZTdvnNUj===== LICENSE END ===== （10）user name ：trans ===== LICENSE BEGIN =====46035-1204201000000eLEnohadXP92ouUZXsbTnB0ZinojWWQnd1B5YydCRHnfE3rrGGDYciRuZIYUbPAmfODqSeKomq6WEI3muyUgt===== LICENSE END =====","categories":[{"name":"webstorm","slug":"webstorm","permalink":"http://yoursite.com/categories/webstorm/"}],"tags":[],"keywords":[{"name":"webstorm","slug":"webstorm","permalink":"http://yoursite.com/categories/webstorm/"}]},{"title":"mysql配置","slug":"mysql配置","date":"2018-05-23T02:57:08.000Z","updated":"2018-05-23T02:57:34.246Z","comments":true,"path":"2018/05/23/mysql配置/","link":"","permalink":"http://yoursite.com/2018/05/23/mysql配置/","excerpt":"","text":"","categories":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/categories/mysql/"}],"tags":[],"keywords":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/categories/mysql/"}]},{"title":"GitHub操作指南","slug":"GitHub操作指南","date":"2018-05-23T02:53:33.000Z","updated":"2018-05-23T02:54:19.006Z","comments":true,"path":"2018/05/23/GitHub操作指南/","link":"","permalink":"http://yoursite.com/2018/05/23/GitHub操作指南/","excerpt":"","text":"注册","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}],"tags":[],"keywords":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}]},{"title":"link(常用)","slug":"link-常用","date":"2018-05-23T02:45:11.000Z","updated":"2018-05-23T02:46:52.140Z","comments":true,"path":"2018/05/23/link-常用/","link":"","permalink":"http://yoursite.com/2018/05/23/link-常用/","excerpt":"","text":"常用地址百度翻译","categories":[{"name":"link","slug":"link","permalink":"http://yoursite.com/categories/link/"}],"tags":[],"keywords":[{"name":"link","slug":"link","permalink":"http://yoursite.com/categories/link/"}]},{"title":"oraclc基本使用","slug":"oraclc基本使用","date":"2018-05-23T02:39:16.000Z","updated":"2018-06-21T03:33:08.738Z","comments":true,"path":"2018/05/23/oraclc基本使用/","link":"","permalink":"http://yoursite.com/2018/05/23/oraclc基本使用/","excerpt":"","text":"这里所有操作需要用户登陆,用户myroot,口令123456 删除表删除单个表123首先你有drop的权限drop table 用户表名举例 ：drop table scott.tableA 删除当前用户下所有表场景 ：手动或者动态脚本清除 Oracle清空或者删除当前用户所有的表方法一：使用pl/sql客户端，使用该用户登录，选中所有表 右键drop即可方法二：前提：该用户 有此权限1select 'drop table '||table_name||';' from user_tables; 然后 拷贝其 SQL ，进行删除方法三：使用存储过程删除该用户下所有的表123456789101112131415161718192021222324252627282930set ECHO ONset define offSPOOL logs/create_procedure.log--删除所有表的存储过程;create or replace procedure P_DROP_ALL_TABLEas --引用user_tables表中的tableName的类型; tableName user_tables.table_name%type; type ty is record(table_name varchar2(30)); --定义ref类型游标;-强类型 type ref_type is ref cursor return ty; ref_t ref_type; --定义变量存储数量; mycount number(10); begin --打开游标; open ref_t for select table_name from user_tables; loop --从游标中获取一条记录,放入变量中; fetch ref_t into tableName; SELECT COUNT(*) INTO mycount FROM user_tables WHERE TABLE_NAME = tableName; if mycount&gt;0 then execute immediate 'DROP TABLE '||tableName || ' CASCADE CONSTRAINT '; end if; exit when ref_t%notfound; --退出; end loop; close ref_t; end;/ 清除的话，将 drop 替换为 truncate 或者 delete ,过程 同上 创建函数1www","categories":[{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/categories/oracle/"}],"tags":[],"keywords":[{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/categories/oracle/"}]},{"title":"link(github)","slug":"link-github","date":"2018-05-23T02:23:16.000Z","updated":"2018-05-23T02:26:20.504Z","comments":true,"path":"2018/05/23/link-github/","link":"","permalink":"http://yoursite.com/2018/05/23/link-github/","excerpt":"","text":"github链接地址秀秀的博客","categories":[{"name":"link","slug":"link","permalink":"http://yoursite.com/categories/link/"}],"tags":[],"keywords":[{"name":"link","slug":"link","permalink":"http://yoursite.com/categories/link/"}]},{"title":"oracle数据库连接","slug":"oracle数据库连接","date":"2018-05-22T09:24:53.000Z","updated":"2018-05-22T09:39:33.467Z","comments":true,"path":"2018/05/22/oracle数据库连接/","link":"","permalink":"http://yoursite.com/2018/05/22/oracle数据库连接/","excerpt":"","text":"有很多软件是直接连数据库的，oracle的好多直接连数据的方式都是采用net manager的。好处就是只要安装了oracle哪怕只是客户端，都很容易实现连接数据库。用起来方便，安全。挺不错的。 采用net manager配置1,首先确认安装了oracle，8、9、10什么的哪个版本都行，最低也要安装个oracle的客户端。2,选择netmanager进行如图所示界面3,打开本地，进入服务命名4,单击+号，选择创建，输入服务名，这里输入shujuku5,单击下一步，出现如图所示界面，用默认为tcp/ip协议就行6,填写上服务器的ip地址。注意劲量不用使用localhost这样的地址。7,输入服务器的服务名","categories":[{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/categories/oracle/"}],"tags":[],"keywords":[{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/categories/oracle/"}]},{"title":"link(图片)","slug":"link-图片","date":"2018-05-22T07:09:43.000Z","updated":"2018-05-22T07:12:54.376Z","comments":true,"path":"2018/05/22/link-图片/","link":"","permalink":"http://yoursite.com/2018/05/22/link-图片/","excerpt":"","text":"图片链接地址在线制作ico图标","categories":[{"name":"link","slug":"link","permalink":"http://yoursite.com/categories/link/"}],"tags":[],"keywords":[{"name":"link","slug":"link","permalink":"http://yoursite.com/categories/link/"}]},{"title":"oracle数据库创建(配置)","slug":"oracle数据库创建-配置","date":"2018-05-22T04:47:11.000Z","updated":"2018-05-23T02:35:32.119Z","comments":true,"path":"2018/05/22/oracle数据库创建-配置/","link":"","permalink":"http://yoursite.com/2018/05/22/oracle数据库创建-配置/","excerpt":"","text":"通过配置来创建数据库 Database Configuration Assistantoracle使用的步骤 1,在开始-》所有程序中找到Oracle下级菜单-》配置和移植工具–》Database Configuration Assistant2,首先会进入首页，只需要点击下一步即可，进入到真正配置的第一步。在这步我们选择：创建数据库，点击下一步3,第二步是选择要创建的数据库的模板，Oracle提供的带数据文件的模板，里面包含了预先创建的数据库，这样可以很快速的完成数据库的创建。一般情况下，我们选择：一般用途或事物处理4,这一步需要我们设置数据库名和SID，输入数据库名后自动生成相应的SID,但是我们也可以自己修改5,接下来的一步，直接使用默认配置即可6,进入配置数据库口令的步骤，可以选择为不同账户设置不同的口令，也可以统一所有的口令。如果不设置则会使用默认的口令。此处为了安全考虑，建议大家设置一下口令(Admin123456)。接着点击下一步，接下来的步骤使用默认设置即可7,第7-10步包含了数据库恢复区、内存等的设置，直接使用Oracle的默认值即可。在第11步，勾选创建数据库的同时，也能选择性的将自己建立的数据库存为数据库模板，或者生成数据库创建的脚本。点击完成，等待数据库初始化创建完成，关闭窗口即可。8,最后可以使用我们创建的数据库进行登录了，登录后可以进行建表等操作啦。Oracle创建数据库很多步骤直接使用默认的设置即可满足日常工作学习的需求了，自己另外配置需消耗较多时间 创建表空间需要使用SYS登陆,创建数据库时的口令Admin123456 删除表空间 1drop tablespace WORKFLOW01 including contents; 创建固定表空间 12345CREATE TABLESPACE \"WORKFLOW01\"LOGGING DATAFILE 'D:\\tablespace\\oracle\\work\\WORKFLOW01.ora' SIZE 500m autoextend onnext 32m maxsize 1024mextent management local;commit; 创建实例授权需要使用SYS登陆,创建数据库时的口令Admin123456 删除用户 1drop user myroot cascade; 创建用户 Create the myroot12345create user myrootidentified by \"123456\"default tablespace WORKFLOW01temporary tablespace TEMPprofile DEFAULT; 授权 Grant/Revoke role privileges12grant connect to myroot with admin option;grant dba to myroot with admin option; 授权 Grant/Revoke system privileges12345678grant alter any table to myroot with admin option;grant create any table to myroot with admin option;grant delete any table to myroot with admin option;grant update any table to myroot with admin option;grant drop any table to myroot with admin option;grant insert any table to myroot with admin option;grant select any table to myroot with admin option;grant unlimited tablespace to myroot with admin option;","categories":[{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/categories/oracle/"}],"tags":[],"keywords":[{"name":"oracle","slug":"oracle","permalink":"http://yoursite.com/categories/oracle/"}]},{"title":"spring工作原理","slug":"spring工作原理","date":"2018-05-14T05:56:43.000Z","updated":"2018-05-14T06:47:32.406Z","comments":true,"path":"2018/05/14/spring工作原理/","link":"","permalink":"http://yoursite.com/2018/05/14/spring工作原理/","excerpt":"","text":"Spring工作原理 1、spring原理 内部最核心的就是IOC了，动态注入，让一个对象的创建不用new了，可以自动的生产，这其实就是利用java里的 反射，反射其实就是在运行时动态的去创建、调用对象，Spring就是在运行时，跟xml Spring的配置文件来动态的创 建对象，和调用对象里的方法的 。 Spring还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是在调用这类对 象的具体方法的前后去调用你指定的模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。 Spring目的：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明管理的 （Spring根据这些配置 内部通过反射去动态的组装对象） 要记住：Spring是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。 Spring里用的最经典的一个设计模式就是：模板方法模式。(这里我都不介绍了，是一个很常用的设计模式)， Spring里的配置是很多的，很难都记住，但是Spring里的精华也无非就是以上的两点，把以上两点跟理解了 也就基 本上掌握了Spring. Spring AOP与IOC一、 IoC(Inversion of control): 控制反转1、IoC：概念：控制权由对象本身转向容器；由容器根据配置文件去创建实例并创建各个实例之间的依赖关系 核心：bean工厂；在Spring中，bean工厂创建的各个实例称作bean 二、AOP(Aspect-Oriented Programming): 面向方面编程1、 代理的两种方式：静态代理： 针对每个具体类分别编写代理类； 针对一个接口编写一个代理类； 动态代理： 针对一个方面编写一个InvocationHandler，然后借用JDK反射包中的Proxy类为各种接口动态生成相应的代理类 2、动态代理: 不用写代理类，虚拟机根据真实对象实现的接口产生一个类，通过类实例化一个动态代理，在实例化动态代理时将 真实对象及装备注入到动态代理中，向客户端公开的是动态代理，当客户端调用动态代理方法时，动态代理根据类 的反射得到真实对象的Method,调用装备的invoke方法，将动态代理、 Method、方法参数传与装备的invoke方法， invoke方法在唤起method方法前或后做一些处理。 1、产生动态代理的类: java.lang.refect.Proxy 2、装备必须实现InvocationHandler接口实现invoke方法 3、反射什么是类的返射? 通过类说明可以得到类的父类、实现的接口、内部类、构造函数、方法、属性并可以根据构造器实例化一个对象， 唤起一个方法，取属性值，改属性值。如何得到一个类说明： Class cls=类.class; Class cls=对象.getClass(); Class.forName(&quot;类路径&quot;); 如何得到一个方法并唤起它? Class cls=类.class; Constructor cons=cls.getConstructor(new Class[]{String.class}); Object obj=cons.newInstance(new Object[]{&quot;aaa&quot;}); Method method=cls.getMethod(&quot;方法名&quot;,new Class[]{String.class,Integer.class}); method.invoke(obj,new Object[]{&quot;aa&quot;,new Integer(1)}); 4、spring的三种注入方式是什么?setter interface constructor 5、spring的核心接口及核类配置文件是什么?FactoryBean:工厂bean主要实现ioc/di ApplicationContext ac=new FileXmlApplicationContext(&quot;applicationContext.xml&quot;); Object obj=ac.getBean(&quot;id值&quot;); 6、Spring框架的7个模块 Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean的方式，组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下： 核心容器：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。 BeanFactory 使用控制反转 （IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。 Spring 上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务， 例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。 Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以， 可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提 供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。 Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛 出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连 接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。 Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。 Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以， Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工 作。 Spring MVC 框架：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度 可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。 Spring 框架的功能可以用在任何 J2EE 服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同J2EE 环境 （Web 或 EJB）、独立应用程序、测试环境之间重用。","categories":[{"name":"spring","slug":"spring","permalink":"http://yoursite.com/categories/spring/"}],"tags":[],"keywords":[{"name":"spring","slug":"spring","permalink":"http://yoursite.com/categories/spring/"}]},{"title":"redis集群搭建","slug":"redis集群搭建","date":"2018-05-10T03:20:08.000Z","updated":"2018-05-14T07:07:06.763Z","comments":true,"path":"2018/05/10/redis集群搭建/","link":"","permalink":"http://yoursite.com/2018/05/10/redis集群搭建/","excerpt":"","text":"介于有人需要，总结一下，不保证对 1、下载redis-3.0.0.tar.gz (必须3.0.0及之后版本，之前版本不支持集群模式) 下载：wget http://download.redis.io/releases/redis-3.0.0.tar.gz 1tar -zxvf redis-3.0.0.tar.gz -C /usr/local/ 重命名(如果嫌名字太长，可重命名，我这里就改一下) 12mv /usr/local/redis-3.0.0 /usr/local/redis3.0cd /usr/local/redis3.0 编译 1make 未make install时，/usr/local/redis3.0/src/目录下没有redis-cli、redis-server 等启动脚本 1cd /usr/local/redis3.0/src/ 2、安装 1make install 是否安装成功，可观察/usr/local/redis3.0/src/目录下redis-cli、redis-server 等脚本 3、为了方便操作，同时不影响源文件，这里进行以下操作 12mkdir -p /usr/local/redis/binmv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server /usr/local/redis/bin 4、创建redis-cluster文件夹，并在下面创建6个文件夹（一般集群最少6个，3主3从） 123mkdir -p /usr/local/redis-clustercd /usr/local/redis-clustermkdir 7001 7002 7003 7004 7005 7006 5、将/usr/local/redis3.0/redis.conf配置文件分别copy到700*文件下，分别进行修改 12cp /usr/local/redis3.0/redis.conf /usr/local/redis-cluster/7001vi /usr/local/redis-cluster/7001/redis.conf 修改如下： 12345678daemonize yes # 后台启动port 7001 # 端口bind 192.168.0.228 # 服务器IPdir /usr/local/redis-cluster/7001/ # 数据存放位置，每个节点路径不一样cluster-enabled yes # 启动集群模式cluster-config-file nodes-7001.conf # 名称最好与端口一致cluster-node-timeout 5000 # 5000毫秒appendonly yes # 简单操作 12345sed 's/7001/7002/g' /usr/local/redis-cluster/7001/redis.conf &gt; /usr/local/redis-cluster/7002/redis.confsed 's/7001/7003/g' /usr/local/redis-cluster/7001/redis.conf &gt; /usr/local/redis-cluster/7003/redis.confsed 's/7001/7004/g' /usr/local/redis-cluster/7001/redis.conf &gt; /usr/local/redis-cluster/7004/redis.confsed 's/7001/7005/g' /usr/local/redis-cluster/7001/redis.conf &gt; /usr/local/redis-cluster/7005/redis.confsed 's/7001/7006/g' /usr/local/redis-cluster/7001/redis.conf &gt; /usr/local/redis-cluster/7006/redis.conf 6、由于redis使用到ruby命令，先需安装ruby123yum install ruby # 存在依赖，按yyum install rubygems # 存在依赖，按ygem install redis # 安装redis和ruby接口 安装失败 就进行下面操作: 1234567891011curl -L get.rvm.io | bash -s stablegpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3curl -sSL https://get.rvm.io | bash -s stablesource /usr/local/rvm/scripts/rvmrvm list knownrvm install 2.3.0rvm use 2.3.0rvm remove 1.8.7ruby --versiongem install redisyum install -y rubygems 7、启动6个redis123456/usr/local/redis/bin/redis-server /usr/local/redis-cluster/7001/redis.conf/usr/local/redis/bin/redis-server /usr/local/redis-cluster/7002/redis.conf/usr/local/redis/bin/redis-server /usr/local/redis-cluster/7003/redis.conf/usr/local/redis/bin/redis-server /usr/local/redis-cluster/7004/redis.conf/usr/local/redis/bin/redis-server /usr/local/redis-cluster/7005/redis.conf/usr/local/redis/bin/redis-server /usr/local/redis-cluster/7006/redis.conf 查看是否启动完成 1ps -ef | grep redis 或 1netstat -tunpl | grep redis 8、创建集群1/usr/local/redis3.0/src/redis-trib.rb create --replicas 1 192.168.0.228:7001 192.168.0.228:7002 192.168.0.228:7003 192.168.0.228:7004 192.168.0.228:7005 192.168.0.228:7006 create表示创建 1=主/从(比值) 按顺序 主节点：192.168.0.228:7001 192.168.0.228:7002 192.168.0.228:7003 从节点：192.168.0.228:7004 192.168.0.228:7005 192.168.0.228:7006 192.168.0.228:7004 是 192.168.0.228:7001 的从节点 创建过程会询问，yes即可 9、进入集群环境 进入redis客户端，-c 表示集群模式，-h 表示服务器地址， -p 表示端口 1/usr/local/redis/bin/redis-cli -c -h 192.168.0.228 -p 7001 如果拒绝连接第一步启动 1234567redis-server /usr/local/redis-cluster/7001/redis.confredis-server /usr/local/redis-cluster/7002/redis.confredis-server /usr/local/redis-cluster/7003/redis.confredis-server /usr/local/redis-cluster/7004/redis.confredis-server /usr/local/redis-cluster/7005/redis.confredis-server /usr/local/redis-cluster/7006/redis.confredis-cli 然后进入集群环境 1/usr/local/redis/bin/redis-cli -c -h 192.168.0.228 -p 7001 退出redis客户端 1192.168.0.228:7001&gt; quit 关闭redis服务 1/usr/local/redis/bin/redis-cli shutdown 注：电脑性能不好，实际环境中自行改成不同机器IP即可收起","categories":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/categories/redis/"}],"tags":[],"keywords":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/categories/redis/"}]},{"title":"BlueLake博客主题的详细配置","slug":"BlueLake博客主题的详细配置","date":"2018-05-08T08:21:50.000Z","updated":"2018-05-08T09:05:38.242Z","comments":true,"path":"2018/05/08/BlueLake博客主题的详细配置/","link":"","permalink":"http://yoursite.com/2018/05/08/BlueLake博客主题的详细配置/","excerpt":"","text":"开始之前BlueLake主题写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。 在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。 1. 安装您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。 1.1 安装主题在根目录下打开终端窗口： git bash1$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 1.2 安装主题渲染器BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。 git bash12$ npm install hexo-renderer-jade@0.3.0 –save$ npm install hexo-renderer-stylus –save 1.3 启用主题打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。 根_config.yml_config.yml1theme: BlueLake 1.4 验证首先启动 Hexo 本地站点，并开启调试模式： git bash1$ hexo s –debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 1.5 更新主题今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。 git bash12cd themes/BlueLakegit pull 2. 配置2.1 配置网站头部显示文字打开根_config.yml，找到： 根_config.yml_config.yml1234title: subtitle: description: author: title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。 2.2 设置语言该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下： 根_config.yml_config.yml1language: zh-CN 2.3 设置菜单打开主题_config.yml，找到： 主题_config.ymlthemes/BlueLake/_config.yml12345678910111213menu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive # - page: about # directory: about/ # icon: fa-user - page: rss directory: atom.xml icon: fa-rss 主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好： 主题_config.ymlthemes/BlueLake/_config.yml12345# About page about: email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 github_url: ## github主页链接地址 2.3.1 添加about页此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面： git bash1$ hexo new page ‘about’ 打开主题_config.yml，补全关于我页面的详细信息： 主题_config.ymlthemes/BlueLake/_config.yml12345678# About page about: photo_url: ## 头像的链接地址 email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 weibo_name: ## 微博用户名 github_url: ## github主页链接地址 github_name: ## github用户名 当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件在根目录下打开命令行窗口： git bash123$ npm install hexo-generator-feed –save$ npm install hexo-generator-sitemap –save$ npm install hexo-generator-baidu-sitemap –save 添加主题_config.yml配置： 主题_config.ymlthemes/BlueLake/_config.yml1234567891011121314Plugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemapfeed: type: atom path: atom.xml limit: 20sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 2.4 添加本地搜索默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件： git bash1$ npm install hexo-generator-json-content@2.2.0 –save 然后在根_config.yml添加配置： 根_config.yml_config.yml123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在主题_config.yml添加配置： 主题_config.ymlthemes/BlueLake/_config.yml1local_search: true 2.5 修改站点图标站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。(有很多网站都可以在线生成ico格式的图片。) 2.6 添加站点关键字请在hexo目录的根_config.yml中添加keywords字段，如： 根_config.yml_config.yml1234567# Sitetitle: Hexosubtitle: 副标题description: 网站简要描述,如：Charles·Zheng‘s blog.keywords: 网站关键字, key, key1, key2, key3author: Charleslanguage: zh-CN 2.7 其他配置主题_config.yml的其他配置 show_category_count——是否显示分类下的文章数。 widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。主题_config.ymlthemes/BlueLake/_config.yml 12show_category_count: true widgets_on_small_screens: true 3.集成第三方服务3.1 添加评论目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。 注册并获得代码。 * 若使用[多说评论](http://duoshuo.com)，注册多说后获得short_name。 若使用Disqus评论，注册Disqus后获得short_name。 若使用来必力评论，注册来必力,获得data-uid。 若使用友言评论，注册友言,获得uid。 若使用网易云跟帖评论，注册网易云跟帖,获得productKey。 若使用畅言评论，注册畅言，获得appid，appkey。 配置主题_config.yml：主题_config.ymlthemes/BlueLake/_config.yml12345678910#Cmmentscomment: duoshuo: ## duoshuo_shortname disqus: ## disqus_shortname livere: ## 来必力(data-uid) uyan: ## 友言(uid) cloudTie: ## 网易云跟帖(productKey) changyan: ## 畅言需在下方配置两个参数，此处不填。 appid: ## 畅言(appid) appkey: ##畅言(appkey) 3.2 百度统计 登录百度统计，定位到站点的代码获取页面。 复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000) 配置主题_config.yml:主题_config.ymlthemes/BlueLake/_config.yml 1baidu_analytics: 8006843039519956000 注意： baidu_analytics不是你的百度id或者百度统计id如若使用谷歌统计，配置方法与百度统计类似。 3.3 卜算子阅读次数统计主题_config.ymlthemes/BlueLake/_config.yml1busuanzi: true 若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。 3.4 微博秀微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。 登录微博开放平台，选择微博秀。 为了与主题风格统一，作如下配置 * 基础设置：高`400px`；勾选宽度自适应；颜色选择`白色`； 样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8； 模块设置：去掉标题、边框、粉丝的勾选框，只留微博。 复制代码里src=&quot;&quot;里引号包裹的内容，替换到layout/_widget/weibo.jadeweibo.jadelayout/_widget/weibo.jade1234.widget .widget-title i(class=‘fa fa-weibo’)= ‘ ‘ + __(‘新浪微博’) iframe(width=“100%”,height=“400”,class=“share_self”,frameborder=“0”,scrolling=“no”,src=“http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)这只是为了和主题的风格统一，当然您也可以自由随意发挥。&gt; 注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。","categories":[],"tags":[],"keywords":[]},{"title":"ngrok的基本使用","slug":"ngrok的基本使用","date":"2018-05-03T06:15:33.000Z","updated":"2018-05-08T02:51:02.624Z","comments":true,"path":"2018/05/03/ngrok的基本使用/","link":"","permalink":"http://yoursite.com/2018/05/03/ngrok的基本使用/","excerpt":"","text":"ngrok使用的步骤1.把项目放到tomcat启动（即点击startup.bat）tomcat将项目放到tomcat下 启动tomcat 2.打开https://www.ngrok.cc/打开https://www.ngrok.cc/，登录系统，设置相关信息。 3.通过cmd进入客户端根目录（即sunny.exe所在目录），启动sunny.exe找到Sunny.exe所在的根目录 通过cmd进行启动，sunny.exe clientid id（https://www.ngrok.cc/ 网站上面的id） 4.外网访问（即：第三步，窗口看到的ip就是外网ip）红色线部分是指IP，http://xiuxiu.free.ngrok.cc/dist/index.html ，dist是指项目名称，index.html页面。","categories":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/categories/ngrok/"}],"tags":[{"name":"ngrok的使用","slug":"ngrok的使用","permalink":"http://yoursite.com/tags/ngrok的使用/"}],"keywords":[{"name":"ngrok","slug":"ngrok","permalink":"http://yoursite.com/categories/ngrok/"}]},{"title":"Vue.js的基本使用","slug":"Vue-js的基本使用","date":"2018-04-20T09:11:46.000Z","updated":"2018-05-08T02:52:05.473Z","comments":true,"path":"2018/04/20/Vue-js的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/20/Vue-js的基本使用/","excerpt":"","text":"路由的使用 安装路由模块 1Npm install vue-router --save 引入模块 1import VueRouter from ‘vue-router’ 作为vue的插件 1Vue.use(VueRouter) 创建路由实例对象 123New VueRouter(&#123;...配置参数&#125;) 注入vue选项参数 123New Vue(&#123;router&#125;) 告诉路由渲染的位置 1&lt;router-view&gt;&lt;/router-view&gt; Hash 和 History 模式vue-router默认 hash 模式 “#” url的hash模式，mode:history模式就是正常的路径模式,history带来的便利是可以使用浏览器的前进后退功能 123456789101112131415161718192021export default new Router(&#123; mode: &apos;history&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) router-link的各项配置router-link 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 a 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名 1234&lt;router-link :to=&quot;&#123;path:&apos;/project&apos;&#125;&quot; active-class=&quot;activeClass&quot; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;project&lt;/span&gt;&lt;/router-link&gt; to：目标路由的链接，此链接可以进行动态绑定的，tag：渲染成某种标签，如:li,event:默认为点击事件，也可以将其设置为鼠标移入的事件，mouseover 12345678910111213141516&lt;router-link :to=&apos;index&apos; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;Home&lt;/span&gt;&lt;/router-link&gt;&lt;script&gt;export default &#123; name: &apos;App&apos;, data () &#123; return &#123; index: &apos;/home&apos; &#125; &#125;&#125;&lt;/script&gt; active-class：设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置 123456789101112131415161718192021222324252627282930313233//路由中设置export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, // 路由中的别名 alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;)//组件中进行设置&lt;router-link :to=&quot;&#123;path:&apos;/project&apos;&#125;&quot; active-class=&quot;activeClass&quot; tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;project&lt;/span&gt;&lt;/router-link&gt; 重定向和别名1234567891011121314151617181920212223242526272829303132333435363738394041424344export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, // 路由中的别名 alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, name: &apos;Project&apos;, component: Project &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125;, // 如果没有以上的地址，就将跳转到home页面 &#123; path: &apos;*&apos;, // component: Home // redirect: &apos;/home&apos; // redirect:&#123;path: &apos;/home&apos;&#125; // redirect:&#123;name: &apos;Home&apos;&#125; // 动态设置重定向的目标路径 redirect: (to) =&gt; &#123; // 目标路由对象，就是访问的路径的路由信息 if (to.path === &apos;/123&apos;) &#123; return &apos;/home&apos; &#125; else if (to.path === &apos;/456&apos;) &#123; return &#123;path: &apos;/doc&apos;&#125; &#125; else &#123; return &#123;name: &apos;Project&apos;&#125; &#125; // return &apos;/home&apos; &#125; &#125; ]&#125;) 嵌套路由使用exact：”是否激活” 默认类名的依据是 inclusive match （全包含匹配） 1234&lt;router-link to=&apos;/&apos; exact tag=&apos;li&apos; event=&apos;mouseover&apos;&gt; &lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt; &lt;span&gt;Home&lt;/span&gt;&lt;/router-link&gt; 子路由的配置 12345678910111213141516171819202122232425262728293031323334353637383940414243export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, // 默认子路由，有默认子路由就不要再父路由中设置name属性 component: study &#125;, &#123; path: &apos;work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) 命名视图子路径的格式为：http://localhost:8081/work，即在子路径中加了/，就相对于跟路径来说的，子路径不需要嵌套，但是组件需要嵌套的。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//vue页面的写法，动态的绑定路径&lt;ul class=&quot;nav&quot;&gt; &lt;router-link :to=&quot;&#123;name: &apos;Project&apos;&#125;&quot; exact tag=&apos;li&apos;&gt; &lt;a&gt;study&lt;/a&gt; &lt;/router-link&gt; &lt;router-link :to=&quot;&#123;name: &apos;work&apos;&#125;&quot; tag=&apos;li&apos;&gt; &lt;a&gt;work&lt;/a&gt; &lt;/router-link&gt; &lt;router-link :to=&quot;&#123;name: &apos;hobby&apos;&#125;&quot; tag=&apos;li&apos;&gt; &lt;a&gt;hobby&lt;/a&gt; &lt;/router-link&gt;&lt;/ul&gt;//路由的配置export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, component: Document &#125; ]&#125;) 多个router-view的应用 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//app.vue&lt;router-view name=&quot;slider&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;center&quot;&gt;&lt;/router-view&gt;//路由中的配置，一个路径对应一个组件用component，一个路径对应多个组件，用Components，默认的组件用default，其他的组件用router-view中name的值export default new Router(&#123; mode: &apos;history&apos;, linkActiveClass: &apos;is-active&apos;, routes: [ &#123; path: &apos;/&apos;, component: Home &#125;, &#123; path: &apos;/home&apos;, name: &apos;Home&apos;, component: Home, alias: &apos;/index&apos; &#125;, &#123; path: &apos;/project&apos;, component: Project, children: [ &#123; path: &apos;&apos;, name: &apos;Project&apos;, component: study &#125;, &#123; path: &apos;/work&apos;, name: &apos;work&apos;, component: work &#125;, &#123; path: &apos;/hobby&apos;, name: &apos;hobby&apos;, component: hobby &#125; ] &#125;, &#123; path: &apos;/doc&apos;, name: &apos;Document&apos;, components: &#123; default: Document, slider: slider &#125; &#125; ]&#125;)","categories":[{"name":"Vue.js的基本使用","slug":"Vue-js的基本使用","permalink":"http://yoursite.com/categories/Vue-js的基本使用/"}],"tags":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/tags/vue-js/"}],"keywords":[{"name":"Vue.js的基本使用","slug":"Vue-js的基本使用","permalink":"http://yoursite.com/categories/Vue-js的基本使用/"}]},{"title":"vuejs项目的下载","slug":"vuejs项目的下载","date":"2018-04-20T02:04:16.000Z","updated":"2018-04-20T08:02:54.388Z","comments":true,"path":"2018/04/20/vuejs项目的下载/","link":"","permalink":"http://yoursite.com/2018/04/20/vuejs项目的下载/","excerpt":"","text":"下载项目： 进入到需要下载vue的文件夹中 vue init webpack MyPrj(打包) 进入目录，安装依赖，cd MyPrj,npm install 运行项目npm run dev","categories":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}],"tags":[{"name":"vuejs项目的下载","slug":"vuejs项目的下载","permalink":"http://yoursite.com/tags/vuejs项目的下载/"}],"keywords":[{"name":"vue.js","slug":"vue-js","permalink":"http://yoursite.com/categories/vue-js/"}]},{"title":"markdown的语法","slug":"markdown的语法","date":"2018-04-20T02:04:16.000Z","updated":"2018-05-08T02:50:45.570Z","comments":true,"path":"2018/04/20/markdown的语法/","link":"","permalink":"http://yoursite.com/2018/04/20/markdown的语法/","excerpt":"","text":"斜体和粗体1234*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~ 分级标题1234567891011这是一个一级标题============================这是一个二级标题--------------------------------------------------# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 超链接语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接文字’这样的形式。链接地址与链接标题前有一个空格。 12欢迎来到[梵居闹市](http://blog.leanote.com/freewalk)欢迎来到[梵居闹市](http://blog.leanote.com/freewalk &quot;梵居闹市&quot;) 列表使用 *，+，- 表示无序列表。 123- 无序列表项 一- 无序列表项 二- 无序列表项 三 引用 语法说明： 引用需要在被引用的文本前加上&gt;符号。 123456&gt; 这是一个有两段文字的引用,&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt;&gt; 无意义的占行文字3.&gt; 无意义的占行文字4 插入图像1![图片Alt](图片地址 “图片Title”) 表格语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐 12345学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 分隔线12345* * *********- - ---------------------------------------- 代码语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。 插入多行代码，可以使用缩进或者“code “,具体看示例。 1C语言里的函数 `scanf()` 怎么使用？ 首行缩进123半方大的空白&amp;ensp;或&amp;#8194;全方大的空白&amp;emsp;或&amp;#8195;不断行的空白格&amp;nbsp;或&amp;#160; 锚点语法描述：在你准备跳转到的指定标题后插入锚点，然后在文档的其它地方写上连接到锚点的链接 12## 0. 目录&#123;#index&#125;跳转到[目录](#index)","categories":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}],"tags":[{"name":"markdown的语法","slug":"markdown的语法","permalink":"http://yoursite.com/tags/markdown的语法/"}],"keywords":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/categories/markdown/"}]},{"title":"Hexo的基本使用","slug":"Hexo的基本使用","date":"2018-04-18T09:09:08.000Z","updated":"2018-07-24T08:32:54.416Z","comments":true,"path":"2018/04/18/Hexo的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/18/Hexo的基本使用/","excerpt":"","text":"Hexo相关的网站https://hexo.io/zh-cn/docs/commands.html Hexo命令123456hexo new [layout] &lt;title&gt; hexo new post \"新建一篇文章\" #新建一篇文章hexo generate 简写 hexo g #生成静态文件hexo server #启动服务器hexo deploy 简写 hexo d #部署网站hexo clean #清理缓存文件和已生成静态的文件hexo version #显示hexo的版本 本地图片的使用主配置_config.yml文件中将post_asset_folder:true 运行下面代码 1npm install https://github.com/CodeFalling/hexo-asset-image –save 图片的路径写法：”/images/hexo/bg.jpg” Hexo 主题安装主题的筛选Hexo主题 ( https://hexo.io/themes/ )页面,可以欣赏到很多很优秀的主题 下载主题点击图片,就会跳到这个主题的博客,看到实际的效果下载这个主题,就点击主题文字,进入主题Github页面,然后复制下载地址 进入blog目录,克隆主题到本地 1$ git clone https://github.com/TongchengQiu/hexo-theme-another.git themes/another 安装主题修改blog根目录的_config.yml,将theme修改为another 注意: 某些主题可能需要安装Node.js的插件,在安装主题时,最好在主题的Githu主页看看安装步骤","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"Hexo的基本使用","slug":"Hexo的基本使用","permalink":"http://yoursite.com/tags/Hexo的基本使用/"}],"keywords":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}]},{"title":"GitHub的基本使用","slug":"GitHub的基本使用","date":"2018-04-18T09:09:08.000Z","updated":"2018-05-09T02:18:14.590Z","comments":true,"path":"2018/04/18/GitHub的基本使用/","link":"","permalink":"http://yoursite.com/2018/04/18/GitHub的基本使用/","excerpt":"","text":"Git可以通过https方式和ssh方式连接服务器上的仓库。两者比较：1.https： 比较方便，但是每次fetch和push代码都需要输入账号和密码，略显麻烦2.ssh： 传输前压缩数据，传输效率高，不需要每次提供账号密码 Git的user name和email设置12$ git config --global user.name \"xxxx\"$ git config --global user.email \"xxxx@163.com\" 生成密钥使用你注册github的邮箱生成秘钥 1$ ssh-keygen -t rsa -C \"xxxx@163.com\" 中间连续3次Enter键 .ssh目录会生成id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人（关于RSA加密，可以自行百度，这里不详细展开） 添加SSH key到github账户在GitHub的账户添加SSH Key，GitHub才能根据此进行加密解密，从而判断此提交是由你本人操作 测试SSH key是否设置成功1$ ssh -T git@github.com 123The authenticity of host 'github.com (192.30.253.113)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? yes 是否继续连接？输入 yes 输出如下，则表示通过 1Hi xxxx! You've successfully authenticated, but GitHub does not provide shell access. 设置项目连接方式1$ git remote set-url git@github.com:oDevilo/Java-Base 这里修改的是项目中 .git （隐藏）文件夹下的config文件原来如下： 123[remote \"origin\"] url = https://github.com/oDevilo/Java-Base fetch = +refs/heads/*:refs/remotes/origin/* 修改后： 123[remote \"origin\"] url = git@github.com:oDevilo/Java-Base fetch = +refs/heads/*:refs/remotes/origin/* 自动部署代码的方法123456789//在项目的_config.yml文件中进行设置deploy: type: git repo: git@github.com:liubing273656697/liubing273656697.github.io.git branch: master//命令hexo clean //清理缓存文件和已生成静态的文件hexo d //部署网站","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}],"tags":[{"name":"GitHub的基本使用","slug":"GitHub的基本使用","permalink":"http://yoursite.com/tags/GitHub的基本使用/"}],"keywords":[{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/categories/GitHub/"}]},{"title":"categories","slug":"categories","date":"2018-04-13T09:27:01.000Z","updated":"2018-04-13T09:27:01.549Z","comments":true,"path":"2018/04/13/categories/","link":"","permalink":"http://yoursite.com/2018/04/13/categories/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"字体小图标的制作方法","slug":"字体小图标的制作","date":"2017-04-09T10:49:26.000Z","updated":"2018-05-08T05:52:27.361Z","comments":true,"path":"2017/04/09/字体小图标的制作/","link":"","permalink":"http://yoursite.com/2017/04/09/字体小图标的制作/","excerpt":"","text":"字体小图标的介绍Font Awesome （http://fontawesome.dashgame.com/)为您提供可缩放的矢量图标，可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。Font Awesome提供的字体小图标不一定能够满足开发项目的需求，因此我们需要根据自身的具体要求进行设计新的小图标。 制作.png格式图片1) 用PS设置符合自己需求的png小图标2) 在网站上面查找符合需求的png图片 相关网站：http://www.easyicon.net/iconsearch/light/3/ 将.png格式图片转化为SVG格式1）进入https://image.online-convert.com/convert-to-svg 页面2）点击上传，上传对应的图片 3.下载转化为svg格式的文件 将SVG格式文件转化为字体小图标1）进入https://icomoon.io/app/#/select/font 页面2) 导入SVG图片,并且选中需要生成的小图标 3）生成自己小图标,选中下方的download标签页,设置字体小图标的前缀名，避免与bootstrap中的冲突，点击download即可以进行下载字体小图标 将制作后的小图标应用于项目1）新建一个文件夹如icomoon，将下面的style.css和font文件夹拷贝到icomoon文件夹下面 2）在页面上引入style.css即可使用新建的字体小图标3）字体小图标的使用格式 &lt;i class=”iconnew-flightTop”&gt;&lt;/i&gt;","categories":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/categories/bootstrap/"}],"tags":[{"name":"字体小图标的制作方法","slug":"字体小图标的制作方法","permalink":"http://yoursite.com/tags/字体小图标的制作方法/"}],"keywords":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://yoursite.com/categories/bootstrap/"}]}]}